using System;
using System.Collections.Generic;

abstract class Robot
{
    public string Nama { get; set; }
    public int Energi { get; set; }
    public int Armor { get; set; }
    public int Serangan { get; set; }

    public Robot(string nama, int energi, int armor, int serangan)
    {
        Nama = nama;
        Energi = energi;
        Armor = armor;
        Serangan = serangan;
    }

    public abstract void KemampuanKhusus(Robot target);

    public virtual void Serang(Robot lawan)
    {
        int damage = Serangan - lawan.Armor;
        damage = (damage > 0) ? damage : 0;
        lawan.Energi -= damage;
        Console.WriteLine($"{Nama} menyerang {lawan.Nama} dengan damage {damage}. Energi {lawan.Nama} tersisa {lawan.Energi}.");
    }

    public void CetakInformasi()
    {
        Console.WriteLine($"Nama: {Nama}");
        Console.WriteLine($"Energi: {Energi}");
        Console.WriteLine($"Armor: {Armor}");
        Console.WriteLine($"Serangan: {Serangan}");
    }

    public bool Mati()
    {
        return Energi <= 0;
    }

    public void PulihkanEnergiAkhirGiliran()
    {
        int pemulihan = 5;
        Energi += pemulihan;
        Console.WriteLine($"{Nama} memulihkan {pemulihan} energi di akhir giliran. Energi sekarang: {Energi}");
    }
}

class RobotInferno : Robot
{
    public RobotInferno() : base("Inferno", 150, 50, 40) { }
    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Ledakan Api'.");
        int damage = 30;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terkena ledakan api dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }
}

class RobotVolt : Robot
{
    public RobotVolt() : base("Volt", 140, 60, 50) { }
    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Kejutan Listrik'.");
        int damage = 25;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terkena kejutan listrik dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }
}

class RobotZephyr : Robot
{
    public RobotZephyr() : base("Zephyr", 120, 30, 60) { }
    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Tornado Dash'.");
        int damage = 35;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terhempas tornado dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }
}

class RobotAqua : Robot
{
    public RobotAqua() : base("Aqua", 180, 40, 35) { }
    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Serangan Tsunami'.");
        int damage = 40;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terhantam tsunami dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }
}

class RobotTitan : Robot
{
    public RobotTitan() : base("Titan", 200, 80, 30) { }
    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Tinjuan Batu'.");
        int damage = 45;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terkena tinjuan batu dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }
}

class BosRobot : Robot
{
    public BosRobot() : base("Bos Akhir", 300, 70, 45) { }

    public override void KemampuanKhusus(Robot target)
    {
        Console.WriteLine($"{Nama} menggunakan kemampuan 'Serangan Dahsyat'!");
        int damage = 50;
        target.Energi -= damage;
        Console.WriteLine($"{target.Nama} terkena serangan dahsyat dan menerima {damage} damage. Energi tersisa: {target.Energi}");
    }

    public override void Serang(Robot lawan)
    {
        base.Serang(lawan);
        Console.WriteLine($"{Nama} melancarkan serangan tambahan!");
        int damageExtra = Serangan / 2 - lawan.Armor;
        damageExtra = (damageExtra > 0) ? damageExtra : 0;
        lawan.Energi -= damageExtra;
        Console.WriteLine($"{lawan.Nama} menerima {damageExtra} damage tambahan. Energi tersisa: {lawan.Energi}");
    }
}

class Program
{
    static void Main(string[] args)
    {
        Console.WriteLine("Selamat datang di Simulator Pertarungan Robot!");

        List<Robot> daftarRobot = new List<Robot>
        {
            new RobotInferno(),
            new RobotVolt(),
            new RobotZephyr(),
            new RobotAqua(),
            new RobotTitan()
        };

        Robot robot1 = PilihRobot("Robot 1", daftarRobot);
        Robot robot2 = PilihRobot("Robot 2", daftarRobot);
        BosRobot bos = new BosRobot();

        int giliran = 1;
        while (!robot1.Mati() && !robot2.Mati() && !bos.Mati())
        {
            Console.WriteLine($"\n--- Giliran {giliran} ---");

            // Giliran Robot 1
            LakukanAksi(robot1, bos);
            if (bos.Mati()) break;

            // Giliran Robot 2
            LakukanAksi(robot2, bos);
            if (bos.Mati()) break;

            // Giliran Bos
            if (giliran % 3 == 0)
            {
                Console.WriteLine("Bos menggunakan kemampuan khusus!");
                Robot target = robot1.Energi < robot2.Energi ? robot1 : robot2;
                bos.KemampuanKhusus(target);
            }
            else
            {
                Robot target = robot1.Energi < robot2.Energi ? robot1 : robot2;
                bos.Serang(target);
            }

            if (robot1.Mati() || robot2.Mati()) break;

            // Pemulihan energi di akhir giliran
            robot1.PulihkanEnergiAkhirGiliran();
            robot2.PulihkanEnergiAkhirGiliran();
            bos.PulihkanEnergiAkhirGiliran();

            giliran++;
        }

        Console.WriteLine("\n--- Hasil Pertarungan ---");
        if (bos.Mati())
        {
            Console.WriteLine("Selamat! Para robot berhasil mengalahkan Bos!");
        }
        else if (robot1.Mati() && robot2.Mati())
        {
            Console.WriteLine("Bos berhasil mengalahkan kedua robot!");
        }
        else
        {
            Console.WriteLine("Pertarungan berakhir tanpa pemenang yang jelas.");
        }
    }

    static Robot PilihRobot(string namaRobot, List<Robot> daftarRobot)
    {
        Console.WriteLine($"\nPilih {namaRobot}:");
        for (int i = 0; i < daftarRobot.Count; i++)
        {
            Console.WriteLine($"{i + 1}. {daftarRobot[i].Nama}");
        }

        int pilihan;
        do
        {
            Console.Write("Masukkan nomor pilihan Anda: ");
        } while (!int.TryParse(Console.ReadLine(), out pilihan) || pilihan < 1 || pilihan > daftarRobot.Count);

        return daftarRobot[pilihan - 1];
    }

    static void LakukanAksi(Robot robot, Robot target)
    {
        Console.WriteLine($"\n{robot.Nama} melakukan aksinya.");
        Console.WriteLine("1. Serang");
        Console.WriteLine("2. Gunakan Kemampuan Khusus");

        int pilihan;
        do
        {
            Console.Write("Pilih aksi (1-2): ");
        } while (!int.TryParse(Console.ReadLine(), out pilihan) || pilihan < 1 || pilihan > 2);

        if (pilihan == 1)
        {
            robot.Serang(target);
        }
        else
        {
            robot.KemampuanKhusus(target);
        }
    }
}
